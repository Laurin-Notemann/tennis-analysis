// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: refresh_tokens.query.sql

package db

import (
	"context"
	"time"

	uuid "github.com/gofrs/uuid"
)

const createToken = `-- name: CreateToken :one
WITH new_token AS (
    INSERT INTO refresh_tokens (
        user_id,
        token,
        expiry_date
    ) VALUES (
        $3,  
        $1,  
        $2
    )
    RETURNING id
)
UPDATE users
SET refresh_token_id = (SELECT id FROM new_token)
WHERE users.id = $3
RETURNING id, username, email, password_hash, created_at, updated_at, refresh_token_id
`

type CreateTokenParams struct {
	Token      string
	ExpiryDate time.Time
	UserID     uuid.UUID
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Token, arg.ExpiryDate, arg.UserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefreshTokenID,
	)
	return i, err
}

const deleteTokenById = `-- name: DeleteTokenById :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteTokenById(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTokenById, userID)
	return err
}

const getTokenByUserId = `-- name: GetTokenByUserId :one
SELECT id, user_id, token, expiry_date, created_at, updated_at 
FROM refresh_tokens
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetTokenByUserId(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTokenByUserId = `-- name: UpdateTokenByUserId :one
UPDATE refresh_tokens
SET
  token = $1,
  expiry_date = $2,
  updated_at = Now()
WHERE user_id = $3
RETURNING id, user_id, token, expiry_date, created_at, updated_at
`

type UpdateTokenByUserIdParams struct {
	Token      string
	ExpiryDate time.Time
	UserID     uuid.UUID
}

func (q *Queries) UpdateTokenByUserId(ctx context.Context, arg UpdateTokenByUserIdParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, updateTokenByUserId, arg.Token, arg.ExpiryDate, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
