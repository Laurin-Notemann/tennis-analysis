// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: teams.query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNewTeamWithOnePlayer = `-- name: CreateNewTeamWithOnePlayer :one
WITH new_player AS (
  INSERT INTO players (
    first_name,
    last_name
  ) VALUES (
    $1,
    $2
  )
  RETURNING id
)
INSERT INTO teams (
  name,
  user_id,
  player_one
) VALUES (
  $3,
  $4,
  (SELECT id FROM new_player)
)
RETURNING id, name, user_id, player_one, player_two, created_at, updated_at
`

type CreateNewTeamWithOnePlayerParams struct {
	FirstName string
	LastName  string
	Name      string
	UserID    uuid.UUID
}

func (q *Queries) CreateNewTeamWithOnePlayer(ctx context.Context, arg CreateNewTeamWithOnePlayerParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createNewTeamWithOnePlayer,
		arg.FirstName,
		arg.LastName,
		arg.Name,
		arg.UserID,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.PlayerOne,
		&i.PlayerTwo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeamWithTwoPlayers = `-- name: CreateTeamWithTwoPlayers :one
INSERT INTO teams (
  name,
  user_id,
  player_one,
  player_two
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, name, user_id, player_one, player_two, created_at, updated_at
`

type CreateTeamWithTwoPlayersParams struct {
	Name      string
	UserID    uuid.UUID
	PlayerOne uuid.UUID
	PlayerTwo *uuid.UUID
}

func (q *Queries) CreateTeamWithTwoPlayers(ctx context.Context, arg CreateTeamWithTwoPlayersParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeamWithTwoPlayers,
		arg.Name,
		arg.UserID,
		arg.PlayerOne,
		arg.PlayerTwo,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.PlayerOne,
		&i.PlayerTwo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeamById = `-- name: DeleteTeamById :one
DELETE FROM teams
WHERE id = $1
RETURNING id, name, user_id, player_one, player_two, created_at, updated_at
`

func (q *Queries) DeleteTeamById(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRowContext(ctx, deleteTeamById, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.PlayerOne,
		&i.PlayerTwo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllTeamsByUserId = `-- name: GetAllTeamsByUserId :many
SELECT id, name, user_id, player_one, player_two, created_at, updated_at
FROM teams
WHERE user_id = $1
`

func (q *Queries) GetAllTeamsByUserId(ctx context.Context, userID uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeamsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.PlayerOne,
			&i.PlayerTwo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamById = `-- name: GetTeamById :one
SELECT id, name, user_id, player_one, player_two, created_at, updated_at 
FROM teams
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTeamById(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.PlayerOne,
		&i.PlayerTwo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
